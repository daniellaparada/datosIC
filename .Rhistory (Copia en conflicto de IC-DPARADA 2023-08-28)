usethis::use_mit_license()
usethis::use_readme_rmd()
devtools::install()
citation("datosIC")
usethis::use_data_raw("sismos")
sismos <- readr::read_csv("data-raw/sismos-arg.csv")
readr::spec(sismos)
ct <- cols(
Fecha = col_date(format = ""),
Hora = col_time(format = ""),
Latitud = col_double(),
Longitud = col_double(),
Provincia = col_character(),
Percibido = col_logical(),
Magnitud = col_double(),
Profundidad = col_double()
)
cols(
Fecha = col_date(format = ""),
Hora = col_time(format = ""),
Latitud = col_double(),
Longitud = col_double(),
Provincia = col_character(),
Percibido = col_logical(),
Magnitud = col_double(),
Profundidad = col_double()
)
library(readr)
library(glue)
library(devtools)
ct <- cols(
Fecha = col_date(format = ""),
Hora = col_time(format = ""),
Latitud = col_double(),
Longitud = col_double(),
Provincia = col_character(),
Percibido = col_logical(),
Magnitud = col_double(),
Profundidad = col_double()
)
sismos <- readr::read_csv("data-raw/sismos-arg.csv", col_types = ct)
usethis::use_data(sismos, overwrite = TRUE)
usethis::use_r("sismos")
devtools::document()
devtools::load_all(".")
data("sismos", package = "datosIC")
?datosIC::sismos
usethis::use_r("sismos")
usethis::use_r("sismos")
devtools::document()
devtools::load_all(".")
data("sismos", package = "datosIC")
?datosIC::sismos
usethis::use_github()
use_git()
usethis::use_github()
devtools::document()
usethis::use_github()
usethis::use_data_raw("climabici")
climabici <- readr::read_csv("data-raw/clima-bici.csv")
spec(climabici)
readr::spec(climabici)
usethis::use_data(climabici, overwrite = TRUE)
usethis::use_r("climabici")
coldesc <- rep("", ncol(climabici))
names(coldesc) <- names(climabici)
dput(coldesc)
climabici
vars <- c(fecha = "fecha, en el formato año-mes-día",
n = "cantidad de usos de bicletas del día",
tavg = "temperatura promedio (°C) del día",
tmin = "temperatura mínima (°C) del día",
tmax = "temperatura máxima (°C) del día",
prcp = "nivel de precipitaciones (mm) del día",
dia = "nombre del día",
tipo_dia = "tipo de día (día de semana - fin de semana)",
lluvia = "registro de si la precitación es mayor que 0 o no (llueve - no llueve)")
glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
climabici$fecha
climabici
devtools::document()
devtools::document()
pkgload::dev_help('sismos')
pkgload::dev_help('climabici')
devtools::document()
pkgload::dev_help('climabici')
devtools::load_all(".")
usethis::use_github()
devtools::install_github("daniellaparada/datosIC")
library(datosIC)
remove.packages("datosIC")
devtools::install_github("daniellaparada/datosIC")
library(datosIC)
library(datosIC)
devtools::install_github("daniellaparada/datosIC")
usethis::use_data_raw("tempbici")
tempbici <- readr::read_csv("data-raw/temp-bici.csv")
tempbici
spec(tempbici)
readr::spec(tempbici)
usethis::use_data(tempbici, overwrite = TRUE)
vars <- c(fecha = "fecha, en el formato año-mes-día",
n = "cantidad de usos de bicletas del día",
tmin = "temperatura mínima (°C) del día",
tmax = "temperatura máxima (°C) del día",
tmed = "temperatura promedio (°C) del día",
dia = "nombre del día",
tipo_dia = "tipo de día (día de semana - fin de semana)")
glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
usethis::use_r("tempbici")
devtools::document()
devtools::load_all(".")
??datosIC::tempbici
?datosIC::tempbici
citation("datosIC")
usethis::use_data_raw("flujoclima")
flujoclima <- readr::read_csv("data-raw/flujo-clima.csv")
flujoclima
readr::spec(flujoclima)
View(tempbici)
View(flujoclima)
usethis::use_data(flujoclima, overwrite = TRUE)
vars <- c(fecha = "fecha, en el formato mes-día",
n = "cantidad de vehículos registrados en el día por el radar RD 171 de la Autopista Lugones, altura ESMA, sentido A",
tavg = "temperatura promedio (°C) del día",
prcp = "nivel de precipitaciones (mm) del día",
dia = "nombre del día",
tipo_dia = "tipo de día (día de semana - fin de semana)",
lluvia = "registro de si la precitación es mayor que 0 o no (llueve - no llueve)")
glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
usethis::use_r("flujoclima")
devtools::document()
devtools::load_all(".")
usethis::use_data_raw("bateria")
bateria <- readr::read_csv("data-raw/bateria.csv")
bateria <- readr::read_csv("data-raw/bateria.xls")
bateria <- readr::read_csv("data-raw/bateria.xlsx")
bateria <- readr::read_csv("data-raw/bateria.csv")
readr::spec(bateria)
bateria <- readr::read_csv("data-raw/bateria.csv", sep=";")
bateria <- readr::read_csv("data-raw/bateria.csv", sep=",")
bateria <- readr::read_csv("data-raw/bateria.csv")
readr::spec(bateria)
usethis::use_data(bateria, overwrite = TRUE)
bateria <- readr::read_csv("data-raw/bateria.csv", delim=";")
bateria <- readr::read_delim("data-raw/bateria.csv", delim=";")
bateria <- readr::read_delim("data-raw/bateria.csv", delim=",")
bateria <- vroom("data-raw/bateria.csv", delim=";")
## code to prepare `bateria` dataset goes here
library(vroom)
bateria <- vroom("data-raw/bateria.csv")
bateria <- vroom("data-raw/bateria2.csv")
bateria
bateria <- vroom("data-raw/bateria.csv")
readr::spec(bateria)
bateria$desde
library(lubridate)
as.Date(bateria$desde, tryFormats = c("%d/%m/%Y"))
bateria$desde <- as.Date(bateria$desde, tryFormats = c("%d/%m/%Y"))
bateria$desde <- as.Date(bateria$desde, tryFormats = c("%d/%m/%Y"))
bateria$hasta <- as.Date(bateria$hasta, tryFormats = c("%d/%m/%Y"))
bateria$hasta
bateria$carga
usethis::use_data(bateria, overwrite = TRUE)
bateria
readr::spec(bateria)
vars <- c(desde = "fecha de inicio del período de medición, en el formato año-mes-día",
hasta = "fecha de finalización del período de medición, en el formato año-mes-día",
carga = "carga máxima () registrada en el período")
glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
usethis::use_r("bateria")
View(bateria)
devtools::document()
usethis::use_data_raw("nombrarg")
library(vroom)
library(lubridate)
nombrarg <- vroom("data-raw/nombres-arg.csv")
View(nombrarg)
library(tidyverse)
nombrarg %>%
filter(anio == 2015)
nombrarg %>%
filter(nombre == "Mila")
mila <- nombrarg %>%
filter(nombre == "Mila")
milña
mila
View(mila)
View(mila)
mila <- nombrarg %>%
filter(nombre == "Mila")
mila
View(mila)
plot(mila)
plot(mila$anio, mila$cantidad)
mila <- nombrarg %>%
filter(nombre == "Herminia")
mila
plot(mila$anio, mila$cantidad)
mila <- nombrarg %>%
filter(nombre == "Daniela")
mila
plot(mila$anio, mila$cantidad)
mila <- nombrarg %>%
filter(nombre == "Gustavo")
mila
plot(mila$anio, mila$cantidad)
mila <- nombrarg %>%
filter(nombre == "Isabella")
mila
plot(mila$anio, mila$cantidad)
mila <- nombrarg %>%
filter(nombre == "Ainhoa")
mila
plot(mila$anio, mila$cantidad)
mila <- nombrarg %>%
filter(nombre == "Ainoa")
mila
plot(mila$anio, mila$cantidad)
mila <- nombrarg %>%
filter(nombre == "Francesca")
mila
plot(mila$anio, mila$cantidad)
mila <- nombrarg %>%
filter(nombre == "Franchesca")
mila
plot(mila$anio, mila$cantidad)
mila <- nombrarg %>%
filter(nombre == "Lio")
mila
mila <- nombrarg %>%
filter(nombre == "Lionel")
mila
plot(mila$anio, mila$cantidad)
mila <- nombrarg %>%
filter(nombre == "Tiago")
mila
plot(mila$anio, mila$cantidad)
mila <- nombrarg %>%
filter(nombre == "Thiago")
mila
plot(mila$anio, mila$cantidad)
mila <- nombrarg %>%
filter(nombre == "Benjamin")
mila
plot(mila$anio, mila$cantidad)
mila <- nombrarg %>%
order(-cantidad)
# Limpieza
nombrarg %>%
summarize(count_na = sum(is.na(x)))
# Limpieza
nombrarg %>%
group_by(nombre) %>%
summarize(count_na = sum(is.na(x)))
# Limpieza
nombrarg %>%
group_by(nombre) %>%
summarize(count_na = sum(is.na()))
# Limpieza
nombrarg %>%
group_by(nombre) %>%
summarize(n_nombre = sum())
# Limpieza
nombrarg %>%
group_by(nombre)
# Limpieza
nomrbes <- nombrarg %>%
group_by(nombre)
nomrbes
# Limpieza
nomrbes <- nombrarg %>%
group_by(nombre)
nomrbes
nombrarg <- vroom("data-raw/nombres-arg.csv")
# Falta limpieza, solo chequeo que suba OK dado que es pesado
readr::spec(nombrarg)
vars <- c(nombre = "nombre registrado",
cantidad = "cantidad de nombres registrados en el año",
anio = "año de registro")
glue::glue("#'   \\item{[colname]}{[coldesc]}",
colname = names(vars),
coldesc = vars,
.open = "[",
.close = "]")
usethis::use_r("nombrarg")
devtools::document()
nombrarg <- vroom("data-raw/nombres-arg.csv")
devtools::document()
usethis::use_data(nombrarg, overwrite = TRUE)
devtools::document()
usethis::use_git()
usethis::gh_token_help()
usethis::create_github_token()
gitcreds::gitcreds_set()
usethis::gh_token_help()
gitcreds::gitcreds_set()
usethis::use_git()
gitcreds::gitcreds_set()
usethis::use_github()
gitcreds::gitcreds_set()
remove.packages("datosIC")
devtools::install_github("daniellaparada/datosIC")
library(devtools)
devtools::install_github("daniellaparada/datosIC")
data("nombrarg")
View(nombrarg)
